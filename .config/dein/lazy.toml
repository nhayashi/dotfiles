[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'

[[plugins]]
repo = 'Shougo/vimshell.vim'

[[plugins]]
repo = 'Shougo/neosnippet.vim'
depends = ['neosnippet-snippets', 'context_filetype.vim']
on_event = 'InsertCharPre'
on_ft = 'snippet'
hook_add = '''
    imap <C-k> <Plug>(neosnippet_expand_or_jump)
    smap <C-k> <Plug>(neosnippet_expand_or_jump)
    xmap <C-k> <Plug>(neosnippet_expand_target)

    let g:neosnippet#enable_snipmate_compatibility = 1
    let g:neosnippet#enable_completed_snippet = 1
    let g:neosnippet#expand_word_boundary = 1
    let g:neosnippet#disable_runtime_snippets = {'_' : 1}
    let g:neosnippet#snippets_directory = []
    "let g:neosnippet#snippets_directory
    "    \ += ['~/code/src/github.com/honza/vim-snippets/snippets/']
    "let g:neosnippet#snippets_directory
    "    \ += ['~/code/src/github.com/tekkoc/PHPSnippetsCreator/dist/']
    "let g:neosnippet#snippets_directory
    "    \ += ['~/code/src/github.com/Shougo/neosnippet-snippets/neosnippets/']
'''

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'honza/vim-snippets'

[[plugins]]
repo = 'Shougo/context_filetype.vim'

#[[plugins]]
#repo = 'ConradIrwin/vim-bracketed-paste'

[[plugins]]
repo = 'Shougo/neoyank.vim'
on_source = 'denite.nvim'
on_event = 'TextYankPost'

[[plugins]]
repo = 'Shougo/unite.vim'
depends = ['neomru.vim']

[[plugins]]
repo = 'Shougo/denite.nvim'
on_cmd = 'Denite'
hook_add = '''
    "nnoremap <silent> <Leader>r
    "    \ :<C-u>Denite -buffer-name=register
    "    \ -auto-resize -highlight-mode-insert=WildMenu
    "    \ register neoyank<CR>
    "xnoremap <silent> <Leader>r
    "    \ :<C-u>Denite -buffer-name=register
    "    \ -default-action=replace
    "    \ -auto-resize -highlight-mode-insert=WildMenu
    "    \ register neoyank<CR>

    "nnoremap <silent> <Leader><Space>
    "    \ :<C-u>Denite file_rec:~/.config/denite
    "    \ -auto-resize -highlight-mode-insert=WildMenu<CR>
    nnoremap <silent> <Leader>/
    \ :<C-u>Denite -buffer-name=search
    \ -auto-resize -highlight-mode-insert=WildMenu
    \ -auto-highlight line<CR>
    nnoremap <silent> <Leader>*
    \ :<C-u>DeniteCursorWord -buffer-name=search
    \ -auto-resize -highlight-mode-insert=WildMenu
    \ -auto-highlight -mode=normal line<CR>
    "nnoremap <silent> <Leader>s
    "    \ :<C-u>Denite file_point file_old
    "    \ -sorters=sorter_rank
    "    \ -highlight-mode-insert=WildMenu
    "    \ `finddir('.git', ';') != '' ? 'file_rec/git' : 'file_rec'`
    "    \ file file:new<CR>

    "nnoremap <silent><expr> tt &filetype == 'help' ? "g\<C-]>" :
    "    \ ":\<C-u>DeniteCursorWord -buffer-name=tag -immediately
    "    \  tag:include\<CR>"
    "nnoremap <silent><expr> tp &filetype == 'help' ?
    "    \ ":\<C-u>pop\<CR>" : ":\<C-u>Denite -mode=normal jump\<CR>"

    "nnoremap <silent> <Leader>d
    "    \ :<C-u>Denite -auto-resize -highlight-mode-insert=WildMenu dein<CR>
    "nnoremap <silent> <Leader>q
    "    \ :<C-u>Denite -auto-resize -highlight-mode-insert=WildMenu ghq<CR>
    "nnoremap <silent> <Leader>g
    "    \ :<C-u>Denite -buffer-name=search -no-empty -mode=normal grep<CR>
    "nnoremap <silent> <Leader>n
    "    \ :<C-u>Denite -buffer-name=search -resume -mode=normal -refresh<CR>
    "nnoremap <silent> ft
    "    \ :<C-u>Denite auto-resize- -highlight-mode-insert=WildMenu
    "    \ filetype<CR>
    "nnoremap <silent> <C-t>
    "    \ :<C-u>Denite -select=`tabpagenr()-1` -mode=normal deol<CR>
    "nnoremap <silent> <C-k>
    "    \ :<C-u>Denite -mode=normal change jump<CR>

    "nnoremap <silent> <Leader>.
    "    \ :<C-u>Denite -auto-resize -highlight-mode-insert=WildMenu
    "    \ gitstatus<CR>
    "nnoremap <silent> <Leader>;
    "    \ :<C-u>Denite -auto-resize -highlight-mode-insert=WildMenu
    "    \ command command_history<CR>
    nnoremap <silent> <Leader><Leader>
    "\ :<C-u>Denite -auto-resize -highlight-mode-insert=WildMenu buffer<CR>
    \ :<C-u>Denite -auto-resize -mode=normal buffer<CR>
    nnoremap <silent> <Leader>u
    "\ :<C-u>Denite -auto-resize -highlight-mode-insert=WildMenu file_mru<CR>
    \ :<C-u>Denite -auto-resize -mode=normal file_mru<CR>
'''
hook_source = '''
    if executable('rg')
        call denite#custom#var('file_rec', 'command',
            \ ['rg', '--files', '--glob', '!.git'])
        call denite#custom#var('grep', 'command', ['rg', '--threads', '1'])
        call denite#custom#var('grep', 'recursive_opts', [])
        call denite#custom#var('grep', 'final_opts', [])
        call denite#custom#var('grep', 'separator', ['--'])
        call denite#custom#var('grep', 'default_opts',
            \ ['--vimgrep', '--no-heading'])
    else
        call denite#custom#var('file_rec', 'command',
            \ ['ag', '--follow', '--nocolor', '--nogroup', '-g', ''])
    endif

    " Change mappings.
    call denite#custom#map(
    \ 'insert', '<C-r>', '<denite:toggle_matchers:matcher_substring>', 'noremap')
    call denite#custom#map(
    \ 'insert', '<C-s>', '<denite:change_sorters:sorter_reverse>', 'noremap')

    call denite#custom#map(
    \ 'insert','<C-j>', '<denite:move_to_next_line>', 'noremap')
    call denite#custom#map(
    \ 'insert', '<C-k>', '<denite:move_to_previous_line>', 'noremap')

    call denite#custom#map(
    \ 'insert', '<C-a>', '<Home>', 'noremap')
    call denite#custom#map(
    \ 'insert', '<C-e>', '<End>', 'noremap')
    call denite#custom#map(
    \ 'insert', '<C-f>', '<Right>', 'noremap')
    call denite#custom#map(
    \ 'insert', '<C-b>', '<Left>', 'noremap')

    call denite#custom#map(
    \ 'insert', '<C-d>', '<denite:delete_char_under_caret>', 'noremap')

    call denite#custom#map(
    \ 'insert', 'jj', '<denite:enter_mode:normal>', 'noremap')

    " Change matchers.
    call denite#custom#source(
    \ 'file_mru', 'matchers', ['matcher_fuzzy', 'matcher_project_files'])
    call denite#custom#source(
    \ 'file_rec', 'matchers', ['matcher_cpsm'])

    " Change sorters.
    call denite#custom#source(
    \ 'file_rec', 'sorters', ['sorter_sublime'])

    call denite#custom#option('default', {
        \ 'auto_accel': v:true,
        \ 'prompt': '>',
        \ 'source_names': 'short',
        \ })

    call denite#custom#filter(
    \ 'matcher_ignore_globs', 'ignore_globs', [
    \   '.git/', '.ropeproject/', 'build/', '__pycache__/',
    \   '.egg-info', 'venv/', '*.o', '*.make',
    \   'images/', '*.min.*', 'img/', 'fonts/'
    \ ])
'''

[[plugins]]
repo = 'Shougo/vimfiler'
depends = ['unite.vim']
hook_add = '''
    nnoremap <silent> <Leader>v
        \ :<C-u>VimFilerExplorer
        \ -split -simple -parent -winwidth=30 -toggle -no-quit<CR>
    nnoremap <silent> <Leader>f
        \ :<C-u>VimFilerExplorer
        \ -split -simple -parent -winwidth=30 -no-quit -find<CR>
'''
hook_source = '''
    call vimfiler#custom#profile('default', 'context', {
        \ 'safe': 0,
        \ 'auto_expand': 1,
        \ 'parent': 0,
    \ })
    let g:vimfiler_as_default_explorer = 1
    let g:vimfiler_ignore_pattern = [
        \ '^\.DS_Store$',
        \ '^\.git$',
        \ '^__pycache__',
        \ '\.egg-info$',
        \ '\.pyc$'
    \ ]
    autocmd MyAutoCmd FileType vimfiler setlocal nonumber
    autocmd MyAutoCmd FileType vimfiler setlocal norelativenumber
    autocmd MyAutoCmd FileType vimfiler
    \ nmap <buffer> <C-l> <Plug>(vimfiler_switch_to_other_window)
'''

[[plugins]]
repo = 'Jagua/vim-denite-ghq'
on_source = 'denite.nvim'

[[plugins]]
repo = 'Shougo/deoplete.nvim'
depends = ['context_filetype.vim']
on_event = 'InsertEnter'
hook_source = '''
    let g:deoplete#enable_at_startup = 1
    let g:deoplete#enable_ignore_case = 1
    let g:deoplete#enable_smart_case = 1

    " <TAB>: completion.
    imap <silent><expr> <TAB> pumvisible() ?
        \ "\<C-n>" : <SID>check_back_space() ?
        \ "\<TAB>" : deoplete#mappings#manual_complete()
    function! s:check_back_space() abort
        let col = col('.') - 1
        return !col || getline('.')[col - 1]  =~ '\s'
    endfunction

    " <S-TAB>: completion back.
    inoremap <expr><S-TAB>  pumvisible() ? "\<C-p>" : "\<C-h>"
'''

[[plugins]]
repo = 'tyru/open-browser.vim'

[[plugins]]
repo = 'kannokanno/previm'
on_cmd = 'PrevimOpen'
depends = 'open-browser.vim'

[[plugins]]
repo  = 'cespare/vim-toml'
on_ft = ['toml']

[[plugins]]
repo = 'rcmdnk/vim-markdown'
on_ft = ['markdown', 'rst', 'mkd']
hook_add = '''
    let g:vim_markdown_folding_disabled = 1
'''

[[plugins]]
repo = 'joker1007/vim-markdown-quote-syntax'
on_ft = ['markdown', 'rst', 'mkd']

#[[plugins]]
#repo = 'fs111/pydoc.vim'
#on_ft = ['python']

[[plugins]]
repo = 'neovim/python-client'
on_ft = ['python']

#[[plugins]]
#repo = 'KeitaNakamura/highlighter.nvim'
#hook_add = '''
#    "let g:highlighter#auto_update = 0
#'''

[[plugins]]
repo = 'vim-python/python-syntax'
on_ft = ['python']
hook_add = '''
    let g:python_highlight_all = 1
'''

[[plugins]]
repo = 'davidhalter/jedi-vim'
on_ft = ['python']
hook_add = '''
    let g:jedi#force_py_version = 3
    let g:jedi#documentation_command = '<Leader>k'
    "let g:jedi#use_splits_not_buffers = 'winwidth'
'''

[[plugins]]
repo = 'zchee/deoplete-jedi'
on_i = 1
on_ft = ['python']

[[plugins]]
repo = 'andviro/flake8-vim'
on_ft = ['python']
hook_add = '''
    let g:PyFlakeCheckers = 'pep8,mccabe,pyflakes'
    let g:PyFlakeForcePyVersion = 3
'''

[[plugins]]
repo = 'hynek/vim-python-pep8-indent'
on_ft = ['python']

[[plugins]]
repo = 'beanworks/vim-phpfmt'
on_ft = ['php']

[[plugins]]
repo = 'flyinshadow/php_localvarcheck.vim'
on_ft = ['php']

[[plugins]]
repo = 'fatih/vim-go'
on_ft = ['go']

[[plugins]]
repo = 'zchee/deoplete-go'
on_i = 1
on_ft = ['go']

[[plugins]]
repo = 'tomlion/vim-solidity'
on_ft = ['solidity']

[[plugins]]
repo = 'pangloss/vim-javascript'
on_ft = ['javascript']
#hook_add = '''
#    let g:javascript_plugin_jsdoc = 1
#    let g:javascript_plugin_ngdoc = 1
#    let g:javascript_plugin_flow = 1
#'''

#[[plugins]]
#repo = 'moll/vim-node'
#on_ft = ['javascript']

#[[plugins]]
#repo = 'heavenshell/vim-jsdoc'
#on_ft = ['javascript']
